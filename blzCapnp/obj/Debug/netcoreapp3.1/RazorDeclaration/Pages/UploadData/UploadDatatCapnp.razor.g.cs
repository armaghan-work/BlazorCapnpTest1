#pragma checksum "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b63670d6c08655b2c45d6bd21d85bdcd149e53fb"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blzCapnp.Pages.UploadData
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using blzCapnp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using blzCapnp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using NetMQ;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using NetMQ.Sockets;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using BlazorPro.Spinkit;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using blzCapnp.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using Core.Share;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using Core.Share.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using Mas.Rpc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using Capnp.Rpc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using GoogleMapsComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
using GoogleMapsComponents.Maps;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/UploadDataCapnp")]
    public partial class UploadDatatCapnp : Shared.BasePage
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 258 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
       

    private GoogleMap map1;
    private MapOptions mapOptions;
    private Marker marker;
    //private Stack<Marker> markers = new Stack<Marker>();
    bool isAnyMarker = false;

    private List<Common.IdInformation> climateServiceInfos = new List<Common.IdInformation>();
    private List<string> MetaPlusData = new List<string>();


    private int? _selectedServiceId = null;

    private string myLatLong = string.Empty;
    private string myEvent = string.Empty;
    private double myLat = 52.515778;
    private double myLng = 14.112908;

    const string DefaultStatus = "Drop your Sim, Site, Crop and Climate file(s) or just click here to choose you file(s)";
    const int MaxFileSize = 6 * 1024 * 1024; // 6MB
    string status = DefaultStatus;

    private List<UploadedFilesModel> _files = new List<UploadedFilesModel>();
    private bool IsDataSent = false;
    private string SendToServerStatus = string.Empty;
    private string BgColor = string.Empty;
    bool isDataSending = false;
    bool isExportDone = false;
    string jsonDownloadPath = string.Empty;
    string csvDownloadPath = string.Empty;

    bool sim = false;
    bool crop = false;
    bool site = false;
    bool climate = false;

    private string simValue = string.Empty;


    private MonicaParametersBasePathTypeEnum _basePathType = MonicaParametersBasePathTypeEnum.LocalServer;
    private MonicaExportResultType _exportResultType = MonicaExportResultType.DowloadLink;


    [Parameter]
    public string jsonFullDownloadPath { get; set; } = string.Empty;
    [Parameter]
    public string csvFullDownloadPath { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        UserSettingsUpdated += OnAfterUserSettingsUpdatedAsync;

        // google map section
        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 52.515778,
                Lng = 14.112908
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task OnAfterInitAsync()
    {
        await map1.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));
        await map1.InteropObject.AddListener<MouseEvent>("dblclick", async (e) => await OnDoubleClick(e));

        // JsonHandler.GetStationsData();
        // await LoadMarkers();
    }

    private async Task OnClick(MouseEvent e)
    {
        // Change the localization to covert comma to dot
        System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.GetCultureInfo("en-US");
        myLat = e.LatLng.Lat;
        myLng = e.LatLng.Lng;
        myLatLong = e.LatLng.ToString();
        myEvent = "Clicked on:" + myLatLong;

        // Remove marker/s if there is any before
        if (isAnyMarker == true)
        {
            //var lastMarker = markers.Pop();
            await marker.SetMap(null);
            isAnyMarker = false;
        }

        // Add Marker to the selected position
        marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
        {
            Position = e.LatLng,
            Map = map1.InteropObject,
            Label = $" ",
        });
        isAnyMarker = true;

        //GET AVAILABLE WEATHER SERVICES
        climateServiceInfos = await CapnpWeather.GetAvailableServicesAsync();

        myEvent = "Clicked on:" + myLatLong; 
        StateHasChanged();
    }

    private async Task ChangeWeatherService(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            _selectedServiceId = null;
            return;
        }

        //GET METAPLUS OF AVAILABLE DATASETS
        MetaPlusData = await CapnpWeather.GetMetaPlusDataAsync(e.Value.ToString());
    }

    private async Task OnDoubleClick(MouseEvent e)
    {
        myLatLong = e.LatLng.ToString();
        myEvent = "Double Clicked on:" + myLatLong;

        StateHasChanged();
    }

    void OnAfterUserSettingsUpdatedAsync(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task CopyTextToClipboard(string shareLink)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", shareLink);
    }


    async Task ViewFile(IFileListEntry[] files)
    {


        if (files.Length == 0)
        {
            return;
        }
        else
        {
            for (int i = 0; i < files.Length; i++)
            {
                if (files[i].Size > MaxFileSize)
                {
                    status = $"That's too big. Max size: {MaxFileSize / 1024 / 1024} MB";
                    return;
                }
            }

            status = "Loading...";

            for (int i = 0; i < files.Length; i++)
            {
                if (!_files.Any(file => file.File.Name == files[i].Name && file.File.Size == files[i].Size))
                    _files.Add(new UploadedFilesModel() { File = files[i] });
                // add a switch case and check if it is Sim change sim to true and etc,
                // use these values in dialog and present if the file is default one or is uploaded
                if (files[i].Name.Contains("sim"))
                {
                    sim = true;
                }
                else if (files[i].Name.Contains("crop"))
                {
                    crop = true;
                }
                else if (files[i].Name.Contains("site"))
                {
                    site = true;
                }
                else if (files[i].Name.Contains("climate"))
                {
                    climate = true;
                }

            }

            status = DefaultStatus;
        }
    }

    private void RemoveFile(UploadedFilesModel file)
    {
        // switch case - first check the name, if its Sim change its value to false then remove it
        if (file.File.Name.Contains("sim"))
        {
            sim = false;
        }
        else if (file.File.Name.Contains("crop"))
        {
            crop = false;
        }
        else if (file.File.Name.Contains("site"))
        {
            site = false;
        }
        else if (file.File.Name.Contains("climate"))
        {
            climate = false;
        }

        _files.Remove(file);
    }

    private async Task HandleFiles()
    {
        showModal = false; // hide the modal
        isDataSending = true;

        await ResultStatusAsync("Uploading files", 1);

        var filePathes = new List<string>();
        FileUpload.DeleteExistingFiles();

        foreach (var file in _files)
        {
            var filePath = await FileUpload.UploadAsync(file.File);
            filePathes.Add(filePath);
        }

        await ResultStatusAsync("Creating Monica request file", 2);

        var monicaEnvStr = await ZmqProducer.RunProducerAsync(filePathes, UserSetting, _basePathType);

        await ResultStatusAsync("Sending the request to Monica ZMQ", 3);
        //SendToServerStatus += $"Sending Monica request file [{DateTime.Now.ToString()}]... " + Environment.NewLine;
        //BgColor = "colorg3";
        //StateHasChanged();


    }

    async Task ResultStatusAsync(string SendingStatus, int ColorNo)
    {
        SendToServerStatus += SendingStatus + ": " + DateTime.Now.ToLongTimeString() + " ... " + Environment.NewLine;
        switch (ColorNo)
        {
            case 1:
                BgColor = "colorg1";
                break;
            case 2:
                BgColor = "colorg2";
                break;
            case 3:
                BgColor = "colorg3";
                break;
            case 4:
                BgColor = "colorg4";
                break;
            case 5:
                BgColor = "colorg5";
                break;
        }
        StateHasChanged();
    }

    async Task ExportResultAsync(string csvContent) // call ZmqProducer calss
    {
        string answer = csvContent;

        // create path
        string exportPath = "wwwroot/export/";

        foreach (var file in Directory.GetFiles(exportPath))
        {
            if (File.GetCreationTime(file) > DateTime.Now.AddDays(-7))
                continue;
            //File.Delete(file);
        }

        if (_exportResultType == MonicaExportResultType.DowloadLink)
        {
            //get the base URI Address and remove / from its end
            string baseUriAddress = new Uri(NavigationManager.BaseUri).ToString().TrimEnd('/');

            string fileName = Guid.NewGuid().ToString();
            jsonDownloadPath = Path.Combine(exportPath, fileName + ".json");

            File.WriteAllText(jsonDownloadPath, answer);
            jsonDownloadPath = Path.Combine(HostEnvironment.WebRootPath, jsonDownloadPath);
            jsonDownloadPath = jsonDownloadPath.Substring(jsonDownloadPath.IndexOf("/"));
            jsonFullDownloadPath = baseUriAddress + jsonDownloadPath;

            //fileName = Guid.NewGuid().ToString();  // commented to use the old GUID for csv
            csvDownloadPath = Path.Combine(exportPath, fileName + ".csv");
            File.WriteAllText(csvDownloadPath, csvContent);
            csvDownloadPath = csvDownloadPath.Substring(csvDownloadPath.IndexOf("/"));
            csvFullDownloadPath = baseUriAddress + csvDownloadPath;
        }
        else if (_exportResultType == MonicaExportResultType.Github)
        {
            //await ResultStatusAsync("Writing the result to github", 5);

            //string fileName = "MonicaResult_" + DateTime.Now.ToString("yyyy-MM-dd_hhmmss");
            //commit the Json and CSV file
            //string repoPath = GithubService.GetRepoResultPath(UserSetting.MonicaResultsPathOnGithub);
            //GithubService.CommitOnGit(fileName, answer, csvContent, UserSetting.GithubUserName, UserSetting.GithubPassword, repoPath);
        }

        isDataSending = false;
        isExportDone = true;
    }

    class UploadedFilesModel
    {
        public UploadedFilesModel()
        {
            IsUploaded = false;
        }

        public IFileListEntry File { get; set; }

        public bool IsUploaded { get; set; }
    }

    

#line default
#line hidden
#nullable disable
#nullable restore
#line 589 "C:\Users\armaghan\source\repos\blzCapnp\blzCapnp\Pages\UploadData\UploadDatatCapnp.razor"
           

    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CapnpWeather CapnpWeather { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ZmqConsumer ZmqConsumer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ZmqProducer ZmqProducer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private blzCapnp.Services.Github.IGithubService GithubService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMonicaZmqService MonicaZmqService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileUpload FileUpload { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment HostEnvironment { get; set; }
    }
}
#pragma warning restore 1591
