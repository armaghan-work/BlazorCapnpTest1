@inject Radzen.NotificationService notificationService

@code{

    #region Notifications

    public async Task ShowSuccessMessageAsync(string title, string message = "")
    {
        var notify = new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
            Summary = title,
            Detail = message,
            Duration = 4000
        };

        await ShowNotification(notify);
    }

    public async Task ShowErrorMessageAsync(string title, string message = "")
    {
        var notify = new NotificationMessage()
        {
            Severity = NotificationSeverity.Error,
            Summary = title,
            Detail = message,
            Duration = 4000
        };

        await ShowNotification(notify);
    }

    public async Task ShowInfoMessageAsync(string title, string message = "")
    {
        var notify = new NotificationMessage()
        {
            Severity = NotificationSeverity.Info,
            Summary = title,
            Detail = message,
            Duration = 4000
        };

        await ShowNotification(notify);
    }

    public async Task ShowWarningMessageAsync(string title, string message = "")
    {
        var notify = new NotificationMessage()
        {
            Severity = NotificationSeverity.Warning,
            Summary = title,
            Detail = message,
            Duration = 4000
        };

        await ShowNotification(notify);
    }

    async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

        await InvokeAsync(() => { StateHasChanged(); });
    }
    #endregion
}